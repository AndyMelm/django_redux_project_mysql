import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { Journal } from '../../Models/Journal';
import { getAlldata } from './showdataAPI';

/**
 * Interface representing the state of the Showdata slice.
 */
export interface ShowdataState {
  logged: boolean;
  journalsdata: Journal[];
}

/**
 * Initial state for the Showdata slice.
 */
const initialState: ShowdataState = {
  logged: false,
  journalsdata: [],
};

/**
 * Asynchronous thunk to fetch all journals data for a given user ID.
 * @function
 * @param {number} userId - The ID of the user for whom to fetch the journals data.
 * @returns {Promise<Journal[]>} A promise that resolves to an array of Journal objects.
 */
export const getAllJournals = createAsyncThunk(
  'journal/getAlldata',
  async (userId: number) => {
    const journals = await getAlldata(userId);
    return journals;
  }
);

/**
 * Slice for the Showdata state management.
 */
export const showdataSlice = createSlice({
  name: 'showdata',
  initialState,
  reducers: {
    /**
     * Reducer function to handle the logout action.
     */
    logout: (state) => {
      state.logged = false;
      sessionStorage.clear();
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getAllJournals.fulfilled, (state, action) => {
        state.journalsdata = action.payload;
      })

  },
});

/**
 * Action generated by the Showdata slice for logout.
 */
export const { logout } = showdataSlice.actions;

/**
 * Selector function to get the journals data from the Showdata state.
 */
export const selectJournalsdata = (state: RootState) => state.showdata.journalsdata;

/**
 * Default reducer for the Showdata slice.
 */
export default showdataSlice.reducer;
